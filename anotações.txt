após instalar o mongodb: 

<nome_editor> /etc/mongod.conf ----------> para visualizar as configurações:
nano /etc/mongod.conf

sudo service mongod start ---------------> para iniciar o mongodb
sudo service mongod stop ----------------> para parar o mongodb

npm install dotenv ----------------------> para utilizar as variáveis de ambiente definidas

npm install mongoose --save -------------> para utilizar o mongo DB


query string ----------------------------> envia dados via get (url)
ex: localhost:7777?val=1&val=2

app.use(express.json()); ----------------> para acessar dados recebidos via post (basicamente terá o mesmo tratamento do método get)

request.params.id -----------------------> parametros passados como valor na url ex: /posts/10

ao transformar a resposta da requisição em json, não se deve mais usar o response.send();

request.query ----------------------------> para recuperar parâmetros via GET
request.body -----------------------------> para recuperar parâmetros via POST 
request.params ---------------------------> para recuperar parâmetros via URL_PARAMS

biblioteca template engine
npm install mustache-express --save ------> template engine para express

__dirname --------------------------------> pega o diretório

plugin: mustache --------------------------> para aplicar o 'Syntax highlighting for mustache'

{{#mostrar}} <conteudo> {{/mostrar}} ------> sintaxe para IF
{{#mostrar}} <conteudo> {{/mostrar}} ------> sintaxe para fazer um loop (tipo for)

OBS: ele reconhece se a variável é um boolean ou não e define se será um 'IF' ou um 'FOR'

{{{var}}} ----------------------------------> usa-se 3 chaves para renderizar como HTML, uma string contendo TAG que foi passada via request

para quando não existir valor na variável
{{^<var>}}
    <p>frase</p>
{{/<var>}}

{{! comentário }} ----------------------------> comentário

{{> <nome_partials>}} ------------------------> para adicionar um conteúdo 'partials' na página

template helpers -----------------------------> são informações padrões para caso não houver informação personalizada

middleware -----------------------------------> algo que acontece entre algo, é um intermediário
ex: processo de login
requisição (tentativa de logar)

validar os campos -----> é um middleware
autorizar o user ------> é um middleware

Controller -> resposta (sucesso ou falha)

middleware global ----------------------------> funciona na aplicação toda
middleware local -----------------------------> especifico a algum(ns) lugar(res)

página 404
consiste em ir passando rota por rota
se chegar na última e não entrar, é porque a rota não existe
sendo assim, caracteriza-se então a 'error 404'

para enviar os dados pelas páginas (enviar form):
ex:
rota para acessar a página:
router.get('/post/add', postController.add);

rota para enviar os dados daquela página 
router.post('/post/add', postController.addAction);

Observação: por convenção, repete-se o nome da ação 'add', e concatena o prefixo 'Action'

Sobre Promisse:
async vai no inicio da função que precisará esperar a resposta
await vai na frente do comando que preciso esperar a resposta

mensagens flash
são mensagens de informação ao usuário ex: sucesso em gravar um novo post

3 libs (abaixo, as 3 numa linha só)
npm install cookie-parser express-session express-flash